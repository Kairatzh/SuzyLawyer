import pytest
import os
from unittest.mock import Mock, patch, AsyncMock
from aiogram.types import Message, User, Chat
from src.app.bot import start, handle_question


class TestBotHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞"""
    
    @pytest.fixture
    def mock_message(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = Mock(spec=Message)
        message.from_user = Mock(spec=User)
        message.from_user.id = 123456
        message.chat = Mock(spec=Chat)
        message.chat.id = 123456
        message.answer = AsyncMock()
        message.reply = AsyncMock()
        return message
    
    @pytest.mark.asyncio
    async def test_start_command(self, mock_message):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start"""
        await start(mock_message)
        
        mock_message.answer.assert_called_once_with(
            "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω—É."
        )
    
    @pytest.mark.asyncio
    async def test_handle_question_success(self, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        mock_message.text = "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û?"
        
        with patch('src.app.bot.aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.json = AsyncMock(return_value={
                "answer": "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã..."
            })
            
            mock_context = AsyncMock()
            mock_context.__aenter__.return_value = mock_response
            mock_context.__aexit__.return_value = None
            
            mock_session.return_value.post.return_value = mock_context
            
            await handle_question(mock_message)
            
            mock_message.reply.assert_called_once_with(
                "‚öñÔ∏è <b>–û—Ç–≤–µ—Ç:</b>\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –û–û–û –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã..."
            )
    
    @pytest.mark.asyncio
    async def test_handle_question_api_error(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ API"""
        mock_message.text = "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
        
        with patch('src.app.bot.aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 500
            
            mock_context = AsyncMock()
            mock_context.__aenter__.return_value = mock_response
            mock_context.__aexit__.return_value = None
            
            mock_session.return_value.post.return_value = mock_context
            
            await handle_question(mock_message)
            
            mock_message.reply.assert_called_once_with(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
    
    @pytest.mark.asyncio
    async def test_handle_question_connection_error(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        mock_message.text = "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
        
        with patch('src.app.bot.aiohttp.ClientSession') as mock_session:
            mock_session.side_effect = Exception("Connection error")
            
            await handle_question(mock_message)
            
            mock_message.reply.assert_called_once_with(
                "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
    
    @pytest.mark.asyncio
    async def test_handle_question_empty_text(self, mock_message):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        mock_message.text = "   "  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        
        await handle_question(mock_message)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω API —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        mock_message.reply.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_handle_question_strips_whitespace(self, mock_message):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        mock_message.text = "  –í–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏  "
        
        with patch('src.app.bot.aiohttp.ClientSession') as mock_session:
            mock_response = AsyncMock()
            mock_response.status = 200
            mock_response.json = AsyncMock(return_value={"answer": "–û—Ç–≤–µ—Ç"})
            
            mock_context = AsyncMock()
            mock_context.__aenter__.return_value = mock_response
            mock_context.__aexit__.return_value = None
            
            mock_session.return_value.post.return_value = mock_context
            
            await handle_question(mock_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ API –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            mock_session.return_value.post.assert_called_once()
            call_args = mock_session.return_value.post.call_args
            assert "–í–æ–ø—Ä–æ—Å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏" in str(call_args)


class TestBotConfiguration:
    """–¢–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    @patch.dict(os.environ, {
        'BOT_TOKEN': 'test_token_123',
        'FASTAPI_HOST': 'http://test-host:8000'
    })
    def test_bot_configuration_from_env(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        import importlib
        import src.app.bot
        importlib.reload(src.app.bot)
        
        assert src.app.bot.BOT_TOKEN == 'test_token_123'
        assert src.app.bot.FASTAPI_HOST == 'http://test-host:8000'
    
    def test_bot_configuration_defaults(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        import importlib
        import src.app.bot
        importlib.reload(src.app.bot)
        
        assert src.app.bot.FASTAPI_HOST == "http://localhost:8000"


class TestBotInitialization:
    """–¢–µ—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    
    @patch('src.app.bot.Bot')
    @patch('src.app.bot.Dispatcher')
    def test_bot_initialization(self, mock_dispatcher, mock_bot):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        import src.app.bot
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Bot –∏ Dispatcher –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
        mock_bot.assert_called_once()
        mock_dispatcher.assert_called_once()


if __name__ == "__main__":
    pytest.main([__file__])
